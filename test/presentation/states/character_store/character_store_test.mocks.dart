// Mocks generated by Mockito 5.4.1 from annotations
// in rick_and_morty/test/presentation/states/character_store/character_store_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:connectivity_plus/connectivity_plus.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rick_and_morty/data/repository/character_repository.dart'
    as _i2;
import 'package:rick_and_morty/domain/entity/character/character.dart' as _i6;
import 'package:rick_and_morty/domain/usecase/get_characters_filtered_usecase.dart'
    as _i7;
import 'package:rick_and_morty/domain/usecase/get_characters_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCharacterRepository_0 extends _i1.SmartFake
    implements _i2.CharacterRepository {
  _FakeCharacterRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivity_1 extends _i1.SmartFake implements _i3.Connectivity {
  _FakeConnectivity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCharactersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCharactersUseCase extends _i1.Mock
    implements _i4.GetCharactersUseCase {
  MockGetCharactersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CharacterRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCharacterRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CharacterRepository);
  @override
  _i3.Connectivity get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _FakeConnectivity_1(
          this,
          Invocation.getter(#connectivity),
        ),
      ) as _i3.Connectivity);
  @override
  _i5.Future<List<_i6.Character>> call(int? page) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [page],
        ),
        returnValue: _i5.Future<List<_i6.Character>>.value(<_i6.Character>[]),
      ) as _i5.Future<List<_i6.Character>>);
}

/// A class which mocks [GetCharactersFilteredUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCharactersFilteredUseCase extends _i1.Mock
    implements _i7.GetCharactersFilteredUseCase {
  MockGetCharactersFilteredUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CharacterRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCharacterRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CharacterRepository);
  @override
  _i5.Future<List<_i6.Character>> call(
    int? page,
    String? name,
    String? status,
    String? species,
    String? type,
    String? gender,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            page,
            name,
            status,
            species,
            type,
            gender,
          ],
        ),
        returnValue: _i5.Future<List<_i6.Character>>.value(<_i6.Character>[]),
      ) as _i5.Future<List<_i6.Character>>);
}
